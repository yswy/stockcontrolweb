#==============================datasource==============================
#父数据源
#最大活动连接:连接池在同一时间能够分配的最大活动连接的数量,如果设置为非正数则表示不限制
parentDataSource.maxActive=20
#初始化连接:连接池启动时创建的初始化连接数量
parentDataSource.initialSize=1
#最小空闲连接:连接池中容许保持空闲状态的最小连接数量,低于这个数量将创建新的连接,
#如果设置为0则不创建,如果连接验证失败将缩小这个值（ 参考testWhileIdle） 
parentDataSource.minIdle=1
#最大等待时间:当没有可用连接时,连接池等待连接被归还的最大时间(以毫秒计数),
#超过时间则抛出异常,如果设置为-1 表示无限等待
parentDataSource.maxWait=30000
#避免过度验证,保证验证不超过这个频率——以毫秒为单位.如果一个连接应该被验证,但上次验证未达到指定间隔,将不再次验证（毫秒）
parentDataSource.timeBetweenEvictionRunsMillis=60000
#配置一个连接在池中最小生存的时间，只有连接生存大于该时间且当前连接数大于最小空闲连接才释放连接（毫秒）
parentDataSource.minEvictableIdleTimeMillis=30000
#连接超时后是否回收
parentDataSource.removeAbandoned=true
#连接超时时间（秒）
parentDataSource.removeAbandonedTimeout=180
#用来检测连接是否有效的sql
parentDataSource.validationQuery=SELECT 1 FROM DUAL
#空闲连接是否进行验证
parentDataSource.testWhileIdle=true
#从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个.
parentDataSource.testOnBorrow=false
#归还连接时进行检验
parentDataSource.testOnReturn=false
#是否缓存preparedStatement(PSCache).PSCache对支持游标的数据库性能提升巨大，比如oracle.在mysql5.5以下的版本中没有PSCache功能
parentDataSource.poolPreparedStatements=false
#每个连接PSCache大小，在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些
parentDataSource.maxPoolPreparedStatementPerConnectionSize=0
#配置扩展插件.监控统计用的filter:stat;日志用的filter:log4j;防御SQL注入的filter:wall
parentDataSource.filters=stat

#多数据源连接参数
#====================主数据库====================
#连接url
#数据库驱动
dataSource.driverClassName=com.mysql.jdbc.Driver
#本地
#dataSource.url=jdbc:mysql://192.168.88.200:3306/genie?relaxAutoCommit=true&zeroDateTimeBehavior=convertToNull&characterEncoding=utf-8
#dataSource.url=jdbc:mysql://139.224.61.11:3306/article?relaxAutoCommit=true&zeroDateTimeBehavior=convertToNull&characterEncoding=utf-8
dataSource.url=jdbc:mysql://127.0.0.1:3306/article?relaxAutoCommit=true&zeroDateTimeBehavior=convertToNull&characterEncoding=utf-8
#数据库的用户名
#dataSource.username=crm
dataSource.username=root
#数据库的密码
#dataSource.password=crm123
#dataSource.password=grandbest
dataSource.password=123456
#==============================taskExecutor==============================
#当一个任务通过execute(Runnable)方法欲添加到线程池时： 
#如果此时线程池中的数量小于corePoolSize，即使线程池中的线程都处于空闲状态，也要创建新的线程来处理被添加的任务。 
#如果此时线程池中的数量等于 corePoolSize，但是缓冲队列 workQueue未满，那么任务被放入缓冲队列。 
#如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量小于maximumPoolSize，建新的线程来处理被添加的任务。 
#如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量等于maximumPoolSize，那么通过 handler所指定的策略来处理此任务。
#也就是：处理任务的优先级为：核心线程corePoolSize、任务队列workQueue、最大线程 maximumPoolSize，如果三者都满了，使用handler处理被拒绝的任务。 
#当线程池中的线程数量大于 corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止。这样，线程池可以动态的调整池中的线程数。

#线程池维护线程的最少数量
taskExecutor.corePoolSize=20
#线程池维护线程所允许的空闲时间（秒）
taskExecutor.keepAliveSeconds=180
#线程池维护线程的最大数量
taskExecutor.maxPoolSize=100
#线程池所使用的缓冲队列
taskExecutor.queueCapacity=25


#=============================redis====================================
redis.ip=127.0.0.1
redis.port=6379
redis.timeout=10000

redis.pool.maxActive=100
redis.pool.maxIdle=260
redis.pool.maxWait=5000
redis.pool.testOnBorrow=true

redis.ssid.out.time=1800