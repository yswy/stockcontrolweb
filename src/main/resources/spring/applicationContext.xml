<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tool="http://www.springframework.org/schema/tool" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
			http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool-3.2.xsd
			http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
			http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd" default-lazy-init="true">    
	<description>Spring公共配置文件</description>
    
	<!-- properties -->
	<bean id="springConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" lazy-init="false">   
	    <property name="locations">
	    	<list>
	    		<value>classpath:config/config.properties</value>
	    	</list>
	    </property>
	</bean>
	
	<!-- 自动扫描的包名 （只扫描service下，用于事务回滚）-->
	<context:component-scan base-package="com.yswy.*"/>
	<!-- 连接池 -->
    <bean id="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    	<property name="maxActive" value="${parentDataSource.maxActive}" />	<!-- 最大活动连接  -->
    	<property name="initialSize" value="${parentDataSource.initialSize}" />	<!-- 初始化连接数 -->
    	<property name="minIdle" value="${parentDataSource.minIdle}" />	<!-- 最小空闲连接  -->
    	<property name="maxWait" value="${parentDataSource.maxWait}" />	<!-- 最大等待时间 -->
    	
    	<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
  		<property name="timeBetweenEvictionRunsMillis" value="${parentDataSource.timeBetweenEvictionRunsMillis}" />
  		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
  		<property name="minEvictableIdleTimeMillis" value="${parentDataSource.minEvictableIdleTimeMillis}" />
  		
  		<!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="${parentDataSource.removeAbandoned}" />
        <!-- 超时时间，单位是秒 -->
        <property name="removeAbandonedTimeout" value="${parentDataSource.removeAbandonedTimeout}" />
        
        <!-- 用来检测连接是否有效的sql-->
        <property name="validationQuery" value="${parentDataSource.validationQuery}" />
  		<!-- 空闲连接是否进行验证 -->
  		<property name="testWhileIdle" value="${parentDataSource.testWhileIdle}" />
  		<!-- 申请连接时执行validationQuery检测连接是否有效 -->
        <property name="testOnBorrow" value="${parentDataSource.testOnBorrow}" />
        <!-- 归还连接时执行validationQuery检测连接是否有效  -->
        <property name="testOnReturn" value="${parentDataSource.testOnReturn}" />
  
    	<!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> 
    	<property name="poolPreparedStatements" value="${parentDataSource.poolPreparedStatements}" />
    	<property name="maxPoolPreparedStatementPerConnectionSize" value="${parentDataSource.maxPoolPreparedStatementPerConnectionSize}" />
    
    	<!-- 配置扩展插件.监控统计用的filter:stat;日志用的filter:log4j;防御SQL注入的filter:wall -->
	    <property name="filters" value="${parentDataSource.filters}" />
	</bean>
	
	<bean id="dataSource" parent="parentDataSource">
		<property name="driverClassName" value="${dataSource.driverClassName}" />	<!-- 连接驱动，可不配置 ，Druid会根据URL自动检测-->
        <property name="url" value="${dataSource.url}" />
        <property name="username" value="${dataSource.username}" />
        <property name="password" value="${dataSource.password}" />
    </bean>
	
  	<!-- 事务Transaction manager -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref local="dataSource" />
		</property>
	</bean>
	
	<!--事务自动代理-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="find*" propagation="REQUIRED" read-only="true"/>
	        <tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<aop:config proxy-target-class="false">
		<aop:pointcut id="pointcut" expression="execution(* com.gbt.*.service.*.*(..))" />
	    <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut" />
	</aop:config>
	
	<!-- Spring JdbcTemplate注入 -->
	<bean id="nameJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg type="javax.sql.DataSource" ref="dataSource" />
	</bean>
	
	<!-- 线程池 -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${taskExecutor.corePoolSize}" />
		<property name="keepAliveSeconds" value="${taskExecutor.keepAliveSeconds}" />
		<property name="maxPoolSize" value="${taskExecutor.maxPoolSize}" />
		<property name="queueCapacity" value="${taskExecutor.queueCapacity}" />
	</bean>
	
	
	<!-- ======================== EhCache ======================== -->
	<!--  缓存  属性-->  
    <bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">    
        <property name="configLocation"  value="classpath:cache/ehcache.xml"/> 
    </bean>
      
    <!-- 支持缓存注解 -->
    <cache:annotation-driven cache-manager="cacheManager" />
    
    <!-- 默认是cacheManager -->
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager"  ref="cacheManagerFactory"/>
    </bean>
    
	<import resource="applicationContext-redis.xml" />
	<import resource="applicationContext-task.xml" />
</beans>